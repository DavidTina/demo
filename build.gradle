buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "org.grails.plugins:hibernate5:7.0.4"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.2.4"
        classpath 'org.grails.plugins:database-migration:3.1.0'
    }
}

version "0.1"
group "demo"

def branch = System.getProperty("branch") ?: "master"
def repo = branch == "master" ? "xsio-test" : "xsio-jar"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin:"org.grails.grails-gsp"
apply plugin:'io.spring.dependency-management'
apply plugin:'com.bertramlabs.asset-pipeline'

repositories {
    mavenLocal()
    maven {
        name "public"
        credentials {
            username mavenUser
            password mavenPassword
        }
        url "http://nexus.xsio.cn/repository/${repo}"
    }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://jitpack.io" }
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}
dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
        mavenBom "com.convertlab:hub-bom:${branch}.+"
    }
}
sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

assets {
    minifyJs = true//!(branch == "master")
    minifyCss = true//!(branch == "master")
    enableSourceMaps = true//(branch == "master")
    minifyOptions = [
//            languageMode: 'ES2020',
            targetLanguage: 'ES3',
            optimizationLevel: 'SIMPLE'//'SIMPLE'Advanced
    ]
    configOptions = [
            mapping: 'assets',
            typescript: [
                    compiler: 'standard'
            ]
    ]
    developmentRuntime = true
    enableGzip = true
}

dependencies {
    compile("com.convertlab:common:${branch}.+")
    compile("org.apache.kafka:kafka-clients") {
        force = true
    }
    compile "org.grails.plugins:database-migration:3.1.0"
    developmentOnly("org.springframework.boot:spring-boot-devtools")
//    compile "org.springframework.boot:spring-boot-starter-logging"
//    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
//    compile "org.springframework.boot:spring-boot-starter-actuator"
//    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.springframework.boot:spring-boot-starter-web"
//    compile "org.springframework.boot:spring-boot-configuration-processor"
//    compile "org.springframework.boot:spring-boot-starter-data-redis"
    compile 'net.logstash.logback:logstash-logback-encoder:7.2'
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.18.Final"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    compile "mysql:mysql-connector-java"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.1"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.2.4"
    assets 'com.bertramlabs.plugins:typescript-asset-pipeline:3.2.3'
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
//    testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
//    testCompile "org.seleniumhq.selenium:selenium-api:3.14.0"
//    testCompile "org.seleniumhq.selenium:selenium-support:3.14.0"
//    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
//    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"
    compile "com.amazonaws:aws-java-sdk-s3:1.12.261"
    compile "com.amazonaws:aws-java-sdk-sts:1.12.261"
    compile "com.amazonaws:aws-java-sdk-iam:1.12.261"
    compile "com.amazonaws:aws-java-sdk-ec2:1.12.261"
    compile "com.amazonaws:aws-java-sdk-dynamodb:1.12.261"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.24.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}